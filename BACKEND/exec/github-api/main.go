package main

import (
    "bufio"
    "fmt"
    "os"
    "strings"
    "syscall"
    "time"
    "math/rand"
    "strconv"

    "github.com/google/go-github/github"
    "golang.org/x/crypto/ssh/terminal"
    "golang.org/x/oauth2"
)

/* ------- GITHUG API CONTROL ------- */
const (
    githubClientIdentity string     = "c74abcf03e61e209b3c3"
    githubClientSecret string       = "da0f7d33d02552282e72a7e594d39ba76f96d478"
)

// randString returns a (kinda) random string for uniqueness purposes.
func randString() string {
    return strconv.FormatInt(rand.NewSource(time.Now().UnixNano()).Int63(), 10)
}

// generatePersonalAuthTokenRequest is a helper function that generates an
// AuthorizationRequest for an OAuth application Token (uses client id).
func generateAppAuthTokenRequest(clientID string, clientSecret string) *github.AuthorizationRequest {
    rand := randString()
    auth := github.AuthorizationRequest{
        Note:         github.String("App token: Note generated by test: " + rand),
        Scopes:       []github.Scope{github.ScopePublicRepo},
        Fingerprint:  github.String("App token: Fingerprint generated by test: " + rand),
        ClientID:     github.String(clientID),
        ClientSecret: github.String(clientSecret),
    }
    return &auth
}

// getUserPassClient returns a GitHub client for authorization testing. The client
// uses BasicAuth via GH username and password passed in environment variables
// (and will skip the calling test if those vars are not present).
func getUserPassClient(username, password string) *github.Client {
    tp := github.BasicAuthTransport{
        Username: strings.TrimSpace(username),
        Password: strings.TrimSpace(password),
    }
    return github.NewClient(tp.Client())
}

// getOAuthAppClient returns a GitHub client for authorization testing. The client
// uses BasicAuth, but instead of username and password, it uses the client id
// and client secret passed in via environment variables
// (and will skip the calling test if those vars are not present). Certain API operations (check
// an authorization; reset an authorization; revoke an authorization for an app)
// require this authentication mechanism.
//
// See GitHub API docs: https://developer.com/v3/oauth_authorizations/#check-an-authorization
func getOAuthAppClient(clientID, clientSecret string) *github.Client {
    tp := github.BasicAuthTransport{
        Username: strings.TrimSpace(clientID),
        Password: strings.TrimSpace(clientSecret),
    }
    return github.NewClient(tp.Client())
}

func main_basic() {
    r := bufio.NewReader(os.Stdin)
    fmt.Print("GitHub Username: ")
    username, _ := r.ReadString('\n')

    fmt.Print("GitHub Password: ")
    bytePassword, _ := terminal.ReadPassword(int(syscall.Stdin))
    password := string(bytePassword)

    tp := github.BasicAuthTransport{
        Username: strings.TrimSpace(username),
        Password: strings.TrimSpace(password),
    }

    client := github.NewClient(tp.Client())
    user, _, err := client.Users.Get("")

    // Is this a two-factor auth error?  If so, prompt for OTP and try again.
    if _, ok := err.(*github.TwoFactorAuthError); err != nil && ok {
        fmt.Print("\nGitHub OTP: ")
        otp, _ := r.ReadString('\n')
        tp.OTP = strings.TrimSpace(otp)
        user, _, err = client.Users.Get("")
    }

    if err != nil {
        fmt.Printf("\nerror: %v\n", err)
        return
    }

    fmt.Printf("\n%v\n", github.Stringify(user))
}

func main_oauth() {
    ts := oauth2.StaticTokenSource(
        &oauth2.Token{AccessToken: "... your access token ..."},
    )
    tc := oauth2.NewClient(oauth2.NoContext, ts)

    client := github.NewClient(tc)

    // list all repositories for the authenticated user
    _, _, err := client.Repositories.List("", nil)
    if err != nil {
        fmt.Printf("\nerror: %v\n", err)
    }
}

func main_trial() {
    authRequest := generateAppAuthTokenRequest(githubClientIdentity, githubClientSecret)
    baseAuth := github.BasicAuthTransport{
        Username: strings.TrimSpace(githubClientIdentity),
        Password: strings.TrimSpace(githubClientSecret),
    }

    client := github.NewClient(baseAuth.Client())
    auth, resp, err := client.Authorizations.GetOrCreateForApp(githubClientIdentity, authRequest)
    if err != nil {
        fmt.Printf("\nerror: %v\n", err)
    } else {
        fmt.Printf("\nauth %v, resp %v\n", auth, resp)
    }

    user, _, err := client.Users.Get("stkim1")
    if err != nil {
        fmt.Printf("\nerror: %v\n", err)
    } else {
        fmt.Printf(user.String())
    }
    return
}

func main() {
    tp := &github.UnauthenticatedRateLimitedTransport{
        ClientID:     githubClientIdentity,
        ClientSecret: githubClientSecret,
    }
    client := github.NewClient(tp.Client())
    // list all organizations for user "willnorris"
    repo, resp, err := client.Repositories.Get("stkim1", "pocketcluster")
    if err != nil {
        fmt.Printf(err.Error())
    } else {
        fmt.Printf("Repo %v \n\n Response %v", repo, resp)
    }
}